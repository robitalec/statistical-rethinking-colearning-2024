---
title: "Lecture 15 Notes"
author: "Alec L. Robitaille"
date: "2024-05-02"
---

```{r, include = FALSE}
source('R/packages.R')
```


# Social networks

Social network are patterns of directed exchange. Social networks 
are abstractions, not data. 

Social relationships are latent variables, they cannot be directly
observed but the behaviours that contribute to them can be. 

Relationships are paired, eg. A to B and B to A, and either of these
can motivate behaviours. These relationships don't have to be 
symmetrical, eg. A may perceive their relationship with B as 
stronger than B does. 


## Example: gift giving

- Ha, Hb: household A, B
	- features of households, eg. location, wealth, etc.
- Gab: A gives to B
- Tab: Social tie from A to B
- Tba: Social tie from B to A

```{r}
#| fig.height: 4
#| fig.width: 5
coords <- data.frame(
	name = c('Ha', 'Hb', 'Gab', 'Tab', 'Tba'),
	x =    c(1,       3,     2,     2,     2),
	y =    c(0,       0,  0.25,    -1,     1)
)
dagify(
	Gab ~ Ha + Hb + Tab + Tba,
	Tba ~ Ha + Hb,
	Tab ~ Ha + Hb,
	latent = c('Tab', 'Tba'),
  coords = coords
) |> ggdag_status(seed = 2, layout = 'auto') + theme_dag()
```



# Network permutation

A principled approach to modeling networks requires thinking 
generatively about social relationships. Network permutation 
methods do not have a generative model underpinning their 
approach. They consider some null network and compare if observed
networks differ from the null. See eg. Hart et al 2021. 



## Example: Koster Leckie

Food transfers between households

```{r}
#| fig.height: 4
#| fig.width: 5
coords <- data.frame(
	name = c('Ha', 'Hb', 'Gab', 'Tab', 'Tba'),
	x =    c(1,       3,     2,     2,     2),
	y =    c(0,       0,  0.25,    -1,     1)
)
dagify(
	Gab ~ Ha + Hb + Tab + Tba,
	Tba ~ Ha + Hb,
	Tab ~ Ha + Hb,
	latent = c('Tab', 'Tba'),
  coords = coords
) |> ggdag_status(seed = 2, layout = 'auto') + theme_dag()
```

Approach: There any backdoor paths through household features, but
start with the simplest model first and scaffold your way up
by adding complexity slowly. 

